//
//  EmoStyleKit.m
//  emo
//
//  Created by Aviv Wolf on 1/28/15.
//  Copyright (c) 2015 Homage. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "EmoStyleKit.h"


@implementation EmoStyleKit

#pragma mark Cache

static UIColor* _colorRecorderRecordingButtonBG = nil;
static UIColor* _colorAnswerPositive = nil;
static UIColor* _colorAnswerNegative = nil;
static UIColor* _colorDefaultBackground = nil;

static NSShadow* _shadowSimple = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _colorRecorderRecordingButtonBG = [UIColor colorWithRed: 0.723 green: 0.099 blue: 0.099 alpha: 1];
    _colorAnswerPositive = [UIColor colorWithRed: 0.178 green: 1 blue: 0 alpha: 1];
    _colorAnswerNegative = [UIColor colorWithRed: 1 green: 0 blue: 0 alpha: 1];
    _colorDefaultBackground = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    // Shadows Initialization
    _shadowSimple = [NSShadow shadowWithColor: [UIColor.blackColor colorWithAlphaComponent: 0.6] offset: CGSizeMake(-2.1, -2.1) blurRadius: 7];

}

#pragma mark Colors

+ (UIColor*)colorRecorderRecordingButtonBG { return _colorRecorderRecordingButtonBG; }
+ (UIColor*)colorAnswerPositive { return _colorAnswerPositive; }
+ (UIColor*)colorAnswerNegative { return _colorAnswerNegative; }
+ (UIColor*)colorDefaultBackground { return _colorDefaultBackground; }

#pragma mark Shadows

+ (NSShadow*)shadowSimple { return _shadowSimple; }

#pragma mark Drawing Methods

+ (void)drawRecorderRecordButton
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* colorRecorderRecordingButtonOutline = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(9, 9, 70, 70)];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, EmoStyleKit.shadowSimple.shadowOffset, EmoStyleKit.shadowSimple.shadowBlurRadius, [EmoStyleKit.shadowSimple.shadowColor CGColor]);
    [EmoStyleKit.colorRecorderRecordingButtonBG setFill];
    [ovalPath fill];
    CGContextRestoreGState(context);

    [colorRecorderRecordingButtonOutline setStroke];
    ovalPath.lineWidth = 4;
    [ovalPath stroke];
}

@end



@implementation NSShadow (PaintCodeAdditions)

- (instancetype)initWithColor: (UIColor*)color offset: (CGSize)offset blurRadius: (CGFloat)blurRadius
{
    self = super.init;
    if (self)
    {
        self.shadowColor = color;
        self.shadowOffset = offset;
        self.shadowBlurRadius = blurRadius;
    }
    return self;
}

+ (instancetype)shadowWithColor: (UIColor*)color offset: (CGSize)offset blurRadius: (CGFloat)blurRadius
{
    return [self.alloc initWithColor: color offset: offset blurRadius: blurRadius];
}

- (void)set
{
    CGContextSetShadowWithColor(UIGraphicsGetCurrentContext(), self.shadowOffset, self.shadowBlurRadius, [self.shadowColor CGColor]);
}

@end
